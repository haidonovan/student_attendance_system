// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sword {
  id        Int     @id @default(autoincrement())
  name      String
  material  String
  damage    Int
  createdAt DateTime @default(now())
}

// ALL MODEL HERE SAS

// ===== USER & AUTH =====
model User {
  id                String        @id @default(cuid())
  name              String?
  email             String?       @unique
  emailVerified     DateTime?
  image             String?
  role              Role          @default(STUDENT)
  accounts          Account[]
  sessions          Session[]
  teacherProfile    Teacher?
  studentProfile    Student?
  notifications     Notification[]
  generatedReports  Report[]
  password          String?

  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?     
  token_type         String? 
  scope              String? 
  id_token           String? 
  session_state      String? 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

// ====== STUDENTS & TEACHERS ======

model Student {
  id        String   @id @default(cuid())
  userId    String   @unique
  classId   String?
  fullName  String
  birthDate DateTime
  studentId String   @unique
  gender    String
  address   String?

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  class      Class?   @relation(fields: [classId], references: [id])
  attendance Attendance[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Teacher {
  id        String   @id @default(cuid())
  userId    String   @unique
  fullName  String
  subject   String?
  bio       String?

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes    Class[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// ====== CLASS & ATTENDANCE ======

model Class {
  id         String      @id @default(cuid())
  name       String
  section    String?
  year       Int
  teacherId  String?

  teacher    Teacher?    @relation(fields: [teacherId], references: [id])
  students   Student[]
  attendance Attendance[]
  reports    Report[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Attendance {
  id         String   @id @default(cuid())
  studentId  String
  classId    String
  date       DateTime
  status     AttendanceStatus

  student    Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class      Class   @relation(fields: [classId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())

  @@unique([studentId, date])
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

// ====== OPTIONAL: NOTIFICATION & REPORTS ======

model Notification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  read      Boolean  @default(false)
  type      String?
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id             String   @id @default(cuid())
  classId        String
  generatedById  String
  title          String
  content        String?
  createdAt      DateTime @default(now())

  class          Class    @relation(fields: [classId], references: [id])
  generatedBy    User     @relation(fields: [generatedById], references: [id])
}
